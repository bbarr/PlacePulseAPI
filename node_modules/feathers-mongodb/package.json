{
  "name": "feathers-mongodb",
  "description": "Feathers MongoDB service",
  "version": "0.3.0",
  "homepage": "https://feathersjs.com",
  "repository": {
    "type": "git",
    "url": "git://github.com/feathersjs/feathers-mongodb.git"
  },
  "keywords": [
    "services",
    "feathers",
    "mongodb"
  ],
  "author": {
    "name": "Feathers",
    "email": "hello@feathersjs.com",
    "url": "http://feathersjs.com"
  },
  "contributors": [
    {
      "name": "Eric Kryski",
      "email": "e.kryski@gmail.com",
      "url": "http://erickryski.com"
    },
    {
      "name": "David Luecke",
      "email": "daff@neyeon.de",
      "url": "http://neyeon.com"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/feathersjs/feathers-mongodb/issues"
  },
  "main": "lib/mongodb.js",
  "scripts": {
    "test": "grunt test"
  },
  "engines": {
    "node": "~0.10.0",
    "npm": "~1.4.0"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "mongoskin": "^0.6.1",
    "uberproto": "~1.1.0"
  },
  "peerDependencies": {
    "feathers": ">= 1.0.0-pre.1"
  },
  "devDependencies": {
    "feathers": ">= 1.0.0-pre.1",
    "chai": "^1.7.2",
    "database-cleaner": "~0.7.0",
    "grunt": "^0.4.5",
    "grunt-cli": "~0.1.7",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-dox": "^0.4.2",
    "grunt-release": "^0.7.0",
    "grunt-simple-mocha": "^0.4.0",
    "mocha": "^1.12.1",
    "sinon": "^1.7.3",
    "sinon-chai": "^2.4.0"
  },
  "readme": "feathers-mongodb\n================\n\n[![Build Status](https://travis-ci.org/feathersjs/feathers-mongodb.png?branch=master)](https://travis-ci.org/feathersjs/feathers-mongodb)\n[![Code Climate](https://codeclimate.com/github/feathersjs/feathers-mongodb.png)](https://codeclimate.com/github/feathersjs/feathers-mongodb)\n\nA MongoDB CRUD service for [feathers](http://feathersjs.com)\n\n## Getting Started\n\nTo install feathers-hooks from [npm](https://www.npmjs.org/), run:\n\n```bash\n$ npm install feathers-mongodb --save\n```\n\nFinally, to use the plugin in your Feathers app:\n\n```javascript\nvar feathers = require('feathers');\nvar mongodb = require('feathers-mongodb');\n\n// Initialize a MongoDB service with the users collection on a local MongoDB instance\nvar app = feathers()\n  .use('/users', mongodb({\n    collection: 'users'\n  });\n  \napp.listen(8080);\n```\n\n## Options\n\nThe following options can be passed when creating a new MongoDB service:\n\nGeneral options:\n\n- `collection` - The name of the collection\n- `connectionString` - A MongoDB connection string\n- `[_id]` (default: `\"_id\"`) - The id property\n- `username` - MongoDB username\n- `password` - MongoDB password\n\nConnection options (when `connectionString` is not set):\n\n- `host` (default: `\"localhost\"`) - The MongoDB host\n- `port` (default: `27017`) - The MongoDB port\n- `db` (default: `\"feathers\"`) - The name of the database\n\nMongoDB options:\n\n- `w` (default: `1`) - Write acknowledgements\n- `journal` (default: `false`) - Don't wait for journal before acknowledgement\n- `fsync` (default: `false`) - Don't wait for syncing to disk before acknowledgment\n- `safe` (default: `false`) - Safe mode \n\n## Extending MongoDB services\n\nTo extend the basic MongoDB service there are two options. Either through using [Uberproto's](https://github.com/daffl/uberproto) inheritance mechanism or by using [feathers-hooks](https://github.com/feathersjs/feathers-hooks).\n\n### With Uberproto\n\nThe basic MongoDB Feathers service is implemented using [Uberproto](https://github.com/daffl/uberproto), a small EcmaScript 5 inheritance library so you can use the Uberproto syntax to add your custom functionality.\nFor example, you might want `update` and `patch` to behave the same (the basic implementation of `update` replaces the entire object instead of merging it) and add an `updatedAt` and `createdAt` flag to your data:\n\n```js\n// myservice.js\nvar mongodb = require('feathers-mongodb');\nvar Proto = require('uberproto');\n\nvar TimestampPatchService = mongodb.Service.extend({\n  create: function(data, params, callback) {\n    data.createdAt = new Date();\n    \n    // Call the original `create`\n    return this._super(data, params, callback);\n  },\n  \n  update: function() {\n    // Call `patch` instead so that PUT calls merge\n    // instead of replace data, too\n    this.patch(id, data, params, callback);\n  },\n  \n  patch: function(id, data, params, callback) {\n    data.updatedAt = new Date();\n    \n    // Call the original `patch`\n    this._super(id, data, params, callback);\n  }\n});\n\n// Export a simple function that instantiates this new service like\n// var myservice = require('myservice');\n// app.use('/users', myservice(options));\nmodule.exports = function(options) {\n  // We need to call `Proto.create` explicitly here since we are overriding\n  // the original `create` method\n  return Proto.create.call(TimestampPatchService, options);\n}\n\nmodule.exports.Service = TimestampPatchService;\n```\n\n### With hooks\n\nAnother options would be to weave functionality into your existing services using [feathers-hooks](https://github.com/feathersjs/feathers-hooks), for example the above `createdAt` and `updatedAt` functionality:\n\n```javascript\nvar feathers = require('feathers');\nvar hooks = require('feathers-hooks');\nvar mongodb = require('feathers-mongodb');\n\n// Initialize a MongoDB service with the users collection on a local MongoDB instance\nvar app = feathers()\n  .configure(hooks())\n  .use('/users', mongodb({\n    collection: 'users'\n  });\n  \napp.lookup('users').before({\n  create: function(hook, next) {\n    hook.data.createdAt = new Date();\n  },\n  \n  update: function(hook, next) {\n    hook.data.updatedAt = new Date();\n    next();\n  }\n});\n\napp.listen(8080);\n```\n\n## MongoDB options and filtering\n\nInternally the MongoDB service uses [MongoSkin](https://github.com/kissjs/node-mongoskin).\nTo set the query options, set `params.options` in your service calls. Using [feathers-hooks](https://github.com/feathersjs/feathers-hooks), for example, a sort mechanism based on query parameters\n(e.g. `/users?sort=name`) can be implemented as a hook like this:\n\n```js\nvar app = feathers()\n  .configure(hooks())\n  .use('/users', mongodb({\n    collection: 'users'\n  });\n  \napp.lookup('users').before({\n  find: function(hook, next) {\n    // Grab the fieldname from `params.query`\n    var field = hook.params.query.sort;\n    if(field) {\n      hook.params.options = { sort: [[field, -1]] };\n    }\n  }\n});\n```\n\n\n## Changelog\n\n__0.3.0__\n\n- Implement `.patch` support ([#5](https://github.com/feathersjs/feathers-mongodb/issues/5))\n- Better documentation\n- Refactoring that removes pre-implemented MongoSkin options\n\n__0.2.x__\n\n- Pre-releases\n\n## Authors\n\n- [Eric Kryski](https://github.com/ekryski)\n- [David Luecke](https://github.com/daffl)\n\n## License\n\nCopyright (c) 2014 Eric Kryski, David Luecke\n\nLicensed under the [MIT license](LICENSE).",
  "readmeFilename": "README.md",
  "_id": "feathers-mongodb@0.3.0",
  "dist": {
    "shasum": "440a62093c21b9763363bb9168535e0c635c0f16"
  },
  "_from": "feathers-mongodb@",
  "_resolved": "https://registry.npmjs.org/feathers-mongodb/-/feathers-mongodb-0.3.0.tgz"
}
